require 'faker'

puts ""
puts "-------- STEP 1 : DESTROYING ALL ðŸ’€ --------"
puts ""

puts "Destroying trainings... ðŸ’€"
Training.destroy_all
puts "Destroying trainingsAnswers... ðŸ’€"
TrainingAnswer.destroy_all
puts "Destroying possibilities... ðŸ’€"
Possibility.destroy_all
puts "Destroying questions... ðŸ’€"
Question.destroy_all
puts "Destroying subcategories... ðŸ’€"
Subcategory.destroy_all
puts "Destroying categories... ðŸ’€"
Category.destroy_all
puts "Destroying inventories... ðŸ’€"
Inventory.destroy_all
puts "Destroying items...ðŸ’€"
Item.destroy_all
puts "Destroying users... ðŸ’€"
User.destroy_all

puts ""
puts "Finished! ðŸ’€"
puts ""

puts ""
puts "-------- STEP 2 : CREATING ALL ðŸŒ± --------"
puts ""

puts "Creating categories... ðŸŒ±"
cat_ruby = Category.create(name:"Ruby")
cat_oop = Category.create(name: "OOP")
cat_db = Category.create(name: "DB")
cat_front = Category.create(name: "Front")
cat_rails = Category.create(name: "Rails")
cat_project = Category.create(name: "Project")

puts "Creating subcategories... ðŸŒ±"
sub_ruby = Subcategory.create(name: "Programming Basics", content:"Play with IRB and launch a Ruby script from the terminal. Learn about variables, methods and built-in classes.", category: cat_ruby)
sub_ruby2 = Subcategory.create(name: "Flow, Conditionals & Arrays", content:"Learn about conditional statements and loops, coding structures that modify the flow of your programs. Discover and play with arrays.", category: cat_ruby)
sub_ruby3 = Subcategory.create(name: "Iterators & Blocks", content:"Embrace all the cool Ruby iterators (each, select, map and more). Understand what a Ruby block is and how a method can call a block with yield.", category: cat_ruby)
sub_ruby4 = Subcategory.create(name: "Hash & Symbols", content:"Discover and play with hashes, data structures designed to store key-value pairs like dictionaries. Understand symbols, objects a bit similar to strings but more adapted for storing identifiers. Symbols are very often used as hash keys.", category: cat_ruby)
sub_oop = Subcategory.create(name: "Classes & Instances", content:"So far, youâ€™ve played with lots of built-in objects in Ruby (Integer, Hash, Date, etc.). But what about defining your own classes? During this first block youâ€™ll learn to manipulate classes, instances, instance variables and instance methods. Youâ€™ll also learn about constructors and accessors. Letâ€™s build your first classes!", category: cat_oop)
sub_oop2 = Subcategory.create(name: "Inheritance & Self", content:"More advanced OOP concepts, such as inheritance, class methods, and the meaning of the self keyword.", category: cat_oop)
sub_db = Subcategory.create(name: "DB & SQL", content:"Time to learn about relational databases, discover the different relationships between tables (1:n, n:n) and how to draw a database scheme. Then, weâ€™ll get started on SQL.", category: cat_db)
sub_db2 = Subcategory.create(name: "Active Record Basics", content:"Active Record is a powerful Ruby library to connect your object to a database. Active Record is one of the core library in Rails. Discover how an Active Record model is magically linked to a table thanks to a simple naming convention. Thatâ€™s Active Record magic!", category: cat_db)
sub_db3 = Subcategory.create(name: "Associations & Validations", content:"Time to go deeper into Active Record and learn about validations and associations.", category: cat_db)


puts "Creating users... ðŸŒ±"
10.times do
  user = User.create!(
        email: Faker::Internet.email,
        password: Faker::Number.number(digits: 6), #=> 196835
        first_name: Faker::JapaneseMedia::OnePiece.character,
        last_name: Faker::JapaneseMedia::OnePiece.sea,
        gold_count: Faker::Number.number(digits: 2), #=> 19
        experience: Faker::Number.number(digits: 3) #=> 196
      )
end

usertest = User.create!(
  email: "test@test.com",
  password: "123456",
  first_name: "Toto",
  last_name: "Lezozo",
  gold_count: 10,
  experience: 50
)
usertest2 = User.create!(
  email: "lynn@telia.com",
  password: "123456",
  first_name: "Lynn",
  last_name: "Telia",
  gold_count: 100,
  experience: 999
)

usertest3 = User.create!(
  email: "chloe@test.com",
  password: "123456",
  first_name: "Chloe",
  last_name: "Bourgeois",
  gold_count: 50,
  experience: 500
)

puts ""
puts "Finished! ðŸŒ±"
puts ""

puts ""
puts "---- STEP 3 : CREATING ITEMS & INVENTORIES ðŸŒ± ----"
puts ""

puts "Creating items... ðŸŒ±"
puts ""

items = [
   {
     name: "Super croissant",
     description: "The player selected has to bring croissant for next breakfast!",
     probability: 0.05,
     image_name: "supercroissant.png"
   },
   {
     name: "Butler",
     description: "The player selected his your butler for one day!",
     probability: 0.2,
     image_name: "butler.png"
   },
   {
    name: "Swap",
    description: "You can give your place at the Livecode to whomever you wish!",
    probability: 0.2,
    image_name: "swap.png"
  },
  {
    name: "Golden ticket",
    description: "Your next ticket has priority over all other tickets!",
    probability: 0.6,
    image_name: "goldenticket.png"
  },
  {
    name: "Shut up",
    description: "The selected person must not speak for 10 minutes.",
    probability: 0.6,
    image_name: "shutup.png"
  },
  {
    name: "Walker",
    description: "The selected player must walk around the block!",
    probability: 0.6,
    image_name: "walker.png"
  },
  {
    name: "Keyword",
    description: "Every time you say your keyword, everyone has to stand up for 1 day!",
    probability: 0.05,
    image_name: "keyword.png"
  },
  {
    name: "R.E.S.P.E.C.T",
    description: "Everyone must be very polite to you for 1 day!",
    probability: 0.15,
    image_name: "respect.png"
  },
  {
    name: "Ola",
    description: "For a day, every time you enter a room, everyone has to do an ola!",
    probability: 0.15,
    image_name: "ola.png"
  },
  {
    name: "Ego Boost",
    description: "Everyone has to give you a compliment!",
    probability: 0.4,
    image_name: "egoboost.png"
  },
  {
    name: "Taxes",
    description: "You can dip into other people's cakes/snacks for 1 day!",
    probability: 0.4,
    image_name: "taxes.png"
  },
  {
    name: "Joker",
    description: "Whatever happens, you've won, but the other player won't know until the end of the game!",
    probability: 0.05,
    image_name: "joker.png"
  },
  {
    name: "Tornado",
    description: "For one round of a duel and every 3 seconds, the opponent's answers are shuffled!",
    probability: 0.2,
    image_name: "tornado.png"
  },
  {
    name: "Day & night",
    description: "For one round of a duel, the opponent's screen turns off and on every 5 seconds!",
    probability: 0.2,
    image_name: "daynight.png"
  },
  {
    name: "Rainbow",
    description: "For one round of a duel, each letter of the opponent's answers has a different color!",
    probability: 0.6,
    image_name: "rainbow.png"
  },
  {
    name: "Reversed",
    description: "For one round of a duel, the opponent's answers are reversed!",
    probability: 0.6,
    image_name: "reversed.png"
  },
  {
    name: "Timer",
    description: "For one round of a duel, the opponent has only 8 seconds to respond!",
    probability: 0.6,
    image_name: "timer.png"
  }
]

# ItÃ©rer sur le tableau et crÃ©er chaque Item
items.each_with_index do |item_attributes, index|
  puts "[#{index+1}/#{items.size}] Creating item : #{item_attributes[:name]} ðŸŒ±"
  item = Item.create!(name: item_attributes[:name], description: item_attributes[:description], probability: item_attributes[:probability])
  if item_attributes[:image_name].present?
    puts "Upload image for item : #{item_attributes[:name]} ðŸ“¸"
    image_path = Rails.root.join('db', 'images', item_attributes[:image_name])
    image_file = File.open(image_path)
    item.photo.attach(io: image_file, filename: item_attributes[:image_name], content_type: 'image/png')
    image_file.close
  end
end

# item1 = Item.create!(name:"Super croissant", description:"The player selected has to bring croissant for next breakfast!", probability:"1")
# item2 = Item.create!(name:"Butler", description:"The player selected his your butler for one Day!", probability:"1")


puts "Creating inventories... ðŸŒ±"
usertest2.items << Item.all.sample(10)

# inventory1 = Inventory.create!(user: usertest2, item: item1)
# inventory2 = Inventory.create!(user: usertest, item: item2)
# inventory3 = Inventory.create!(user: usertest2, item: item2)

puts ""
puts "Finished! ðŸŒ±"
puts ""

puts ""
puts "---- STEP 4 : CREATING QUESTIONS & POSSIBILITIES ðŸŒ± ----"
puts ""

puts "Creating questions & possibilities... ðŸŒ±"
puts ""

questions = [
  {
    content: "Comment dÃ©marrez-vous une session IRB dans le terminal ?",
    explication: "irb est la commande utilisÃ©e pour lancer l'environnement interactif de Ruby dans le terminal.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "start irb",
        correct: false
      },
      {
        content: "ruby irb",
        correct: false
      },
      {
        content: "irb",
        correct: true
      },
      {
        content: "run irb",
        correct: false
      }
    ]
  },
  {
    content: "Quelle commande utilisez-vous pour exÃ©cuter un script Ruby appelÃ© app.rb ?",
    explication: "ruby app.rb est la commande standard pour exÃ©cuter un script Ruby.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "ruby app.rb",
        correct: true
      },
      {
        content: "run app.rb",
        correct: false
      },
      {
        content: "execute app.rb",
        correct: false
      },
      {
        content: "ruby -run app.rb",
        correct: false
      }
    ]
  },
  {
    content: "Comment dÃ©finissez-vous une variable en Ruby ?",
    explication: "En Ruby, les variables sont dÃ©finies simplement en assignant une valeur avec = sans dÃ©claration prÃ©alable du type.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "let x = 10",
        correct: false
      },
      {
        content: "x = 10",
        correct: true
      },
      {
        content: "define x = 10",
        correct: false
      },
      {
        content: "var x = 10",
        correct: false
      }
    ]
  },
  {
    content: "Quelle syntaxe est utilisÃ©e pour dÃ©finir une mÃ©thode en Ruby ?",
    explication: "En Ruby, les mÃ©thodes sont dÃ©finies avec def suivi du nom de la mÃ©thode et de end pour clÃ´turer la dÃ©finition.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "def method_name; ...; end",
        correct: true
      },
      {
        content: "function method_name() {...}",
        correct: false
      },
      {
        content: "def method_name(...) { ... }",
        correct: false
      },
      {
        content: "def method_name(...) end",
        correct: false
      }
    ]
  },
  {
    content: "Quelle classe Ruby est utilisÃ©e pour manipuler des chaÃ®nes de caractÃ¨res ?",
    explication: "La classe String en Ruby est utilisÃ©e pour manipuler des chaÃ®nes de caractÃ¨res.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "Array",
        correct: false
      },
      {
        content: "String",
        correct: true
      },
      {
        content: "Hash",
        correct: false
      },
      {
        content: "Symbol",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la sortie de l'expression puts \"Hello, \#\{name\}\" si name = \"Alice\" ?",
    explication: "L'interpolation de chaÃ®ne avec \#\{...\} permet d'insÃ©rer la valeur d'une variable dans une chaÃ®ne de caractÃ¨res.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "Hello, Alice",
        correct: true
      },
      {
        content: "Hello, \#\{name\}",
        correct: false
      },
      {
        content: "Hello, name",
        correct: false
      },
      {
        content: "Hello, nil",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode de la classe String renvoie la longueur de la chaÃ®ne ?",
    explication: "length est une mÃ©thode de la classe String qui retourne le nombre de caractÃ¨res dans la chaÃ®ne.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "size",
        correct: false
      },
      {
        content: "length",
        correct: true
      },
      {
        content: "count",
        correct: false
      },
      {
        content: "chars",
        correct: false
      }
    ]
  },
  {
    content: "Comment stockez-vous une valeur numÃ©rique dans une variable ?",
    explication: "En Ruby, les variables sont dÃ©clarÃ©es en assignant directement une valeur sans spÃ©cifier de type.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "var num = 10",
        correct: false
      },
      {
        content: "num = 10",
        correct: true
      },
      {
        content: "let num = 10",
        correct: false
      },
      {
        content: "int num = 10",
        correct: false
      }
    ]
  },
  {
    content: "Quel mot-clÃ© utilisez-vous pour crÃ©er un bloc de code rÃ©utilisable en Ruby ?",
    explication: "def est le mot-clÃ© utilisÃ© en Ruby pour dÃ©finir une mÃ©thode, qui est un bloc de code rÃ©utilisable.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "def",
        correct: true
      },
      {
        content: "function",
        correct: false
      },
      {
        content: "method",
        correct: false
      },
      {
        content: "block",
        correct: false
      }
    ]
  },
  {
    content: "Comment imprimez-vous la chaÃ®ne \"Bonjour, monde !\" dans Ruby ?",
    explication: "puts est utilisÃ© pour afficher une chaÃ®ne de caractÃ¨res avec une nouvelle ligne Ã  la fin.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "print \"Bonjour, monde !\"",
        correct: false
      },
      {
        content: "puts \"Bonjour, monde !\"",
        correct: true
      },
      {
        content: "echo \"Bonjour, monde !\"",
        correct: false
      },
      {
        content: "printf \"Bonjour, monde !\"",
        correct: false
      }
    ]
  },
  {
    content: "Que se passe-t-il si vous essayez d'accÃ©der Ã  une variable non dÃ©finie en Ruby ?",
    explication: "En Ruby, accÃ©der Ã  une variable non dÃ©finie provoque une erreur NameError.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "0 est retournÃ©",
        correct: false
      },
      {
        content: "nil est retournÃ©",
        correct: false
      },
      {
        content: "Une erreur est levÃ©e",
        correct: true
      },
      {
        content: "La variable est automatiquement dÃ©finie sur nil",
        correct: false
      }
    ]
  },
  {
    content: "Comment appelez-vous une mÃ©thode greet dÃ©finie comme def greet(name) en Ruby ?",
    explication: "Les mÃ©thodes en Ruby sont appelÃ©es en utilisant leur nom suivi de parenthÃ¨ses contenant les arguments, si nÃ©cessaire.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "greet[name]",
        correct: false
      },
      {
        content: "greet.name",
        correct: false
      },
      {
        content: "greet(\"Alice\")",
        correct: true
      },
      {
        content: "call greet(\"Alice\")",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode de String convertit tous les caractÃ¨res en majuscules ?",
    explication: "La mÃ©thode upcase convertit tous les caractÃ¨res d'une chaÃ®ne en majuscules.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "upcase",
        correct: true
      },
      {
        content: "capitalize",
        correct: false
      },
      {
        content: "uppercase",
        correct: false
      },
      {
        content: "to_upper",
        correct: false
      }
    ]
  },
  {
    content: "Quel est le rÃ©sultat de 5 + \"10\" en Ruby ?",
    explication: "Ruby ne permet pas d'additionner un nombre avec une chaÃ®ne de caractÃ¨res, ce qui lÃ¨ve une TypeError.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "15",
        correct: false
      },
      {
        content: "510",
        correct: false
      },
      {
        content: "Une erreur",
        correct: true
      },
      {
        content: "5",
        correct: false
      }
    ]
  },
  {
    content: "Comment arrÃªtez-vous une session IRB ?",
    explication: "Vous pouvez quitter IRB en tapant exit, quit ou en utilisant Ctrl + D.",
    subcategory: "Programming Basics",
    possibilities: [
      {
        content: "exit",
        correct: true
      },
      {
        content: "quit",
        correct: true
      },
      {
        content: "Ctrl + D",
        correct: true
      }
    ]
  },
  {
    content: "Quelle structure utilisez-vous pour exÃ©cuter du code uniquement si une condition est vraie ?",
    explication: "La structure if est utilisÃ©e pour exÃ©cuter du code seulement si une condition donnÃ©e est vraie.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "if",
        correct: true
      },
      {
        content: "while",
        correct: false
      },
      {
        content: "for",
        correct: false
      },
      {
        content: "loop",
        correct: false
      }
    ]
  },
  {
    content: "Quel mot-clÃ© Ruby permet de tester une condition aprÃ¨s l'exÃ©cution d'un bloc de code, c'est-Ã -dire exÃ©cuter le bloc tant que la condition est fausse ?",
    explication: "until exÃ©cute un bloc de code tant que la condition spÃ©cifiÃ©e est fausse.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "while",
        correct: false
      },
      {
        content: "until",
        correct: true
      },
      {
        content: "for",
        correct: false
      },
      {
        content: "if",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la valeur de arr = [1, 2, 3]; arr[2] ?",
    explication: "Les indices des tableaux en Ruby commencent Ã  0, donc arr[2] renvoie le troisiÃ¨me Ã©lÃ©ment du tableau, soit 3.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "1",
        correct: false
      },
      {
        content: "2",
        correct: false
      },
      {
        content: "3",
        correct: true
      },
      {
        content: "nil",
        correct: false
      }
    ]
  },
  {
    content: "Quel mot-clÃ© est utilisÃ© pour sortir prÃ©maturÃ©ment d'une boucle ?",
    explication: "break est utilisÃ© pour sortir immÃ©diatement d'une boucle, quelles que soient les conditions restantes.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "exit",
        correct: false
      },
      {
        content: "stop",
        correct: false
      },
      {
        content: "break",
        correct: true
      },
      {
        content: "end",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode permet d'ajouter un Ã©lÃ©ment Ã  la fin d'un tableau ?",
    explication: "La mÃ©thode push ajoute un nouvel Ã©lÃ©ment Ã  la fin d'un tableau.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "push",
        correct: true
      },
      {
        content: "pop",
        correct: false
      },
      {
        content: "shift",
        correct: false
      },
      {
        content: "unshift",
        correct: false
      }
    ]
  },
  {
    content: "Comment appelez-vous un bloc de code qui se rÃ©pÃ¨te tant qu'une condition reste vraie ?",
    explication: "La boucle while continue de s'exÃ©cuter tant que la condition spÃ©cifiÃ©e reste vraie.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "for",
        correct: false
      },
      {
        content: "while",
        correct: true
      },
      {
        content: "if",
        correct: false
      },
      {
        content: "case",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la sortie de l'expression suivante : arr = [1, 2, 3]; arr.pop ?",
    explication: "La mÃ©thode pop supprime et retourne le dernier Ã©lÃ©ment du tableau, ici 3.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "1",
        correct: false
      },
      {
        content: "2",
        correct: false
      },
      {
        content: "3",
        correct: true
      },
      {
        content: "nil",
        correct: false
      }
    ]
  },
  {
    content: "Quelle structure est utilisÃ©e pour itÃ©rer sur chaque Ã©lÃ©ment d'un tableau ?",
    explication: "each est couramment utilisÃ©e pour parcourir chaque Ã©lÃ©ment d'un tableau.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "for",
        correct: false
      },
      {
        content: "while",
        correct: false
      },
      {
        content: "loop",
        correct: false
      },
      {
        content: "each",
        correct: true
      }
    ]
  },
  {
    content: "Quel mot-clÃ© utilisez-vous pour gÃ©rer plusieurs conditions en Ruby ?",
    explication: "Le mot-clÃ© case en Ruby est utilisÃ© pour Ã©valuer une variable contre plusieurs valeurs.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "switch",
        correct: false
      },
      {
        content: "case",
        correct: true
      },
      {
        content: "if",
        correct: false
      },
      {
        content: "elsif",
        correct: false
      }
    ]
  },
  {
    content: "Quelle boucle est la mieux adaptÃ©e pour exÃ©cuter un bloc de code un nombre spÃ©cifique de fois ?",
    explication: "La boucle for est idÃ©ale pour exÃ©cuter un bloc de code un nombre spÃ©cifique de fois, gÃ©nÃ©ralement sur une plage ou une collection.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "for",
        correct: true
      },
      {
        content: "while",
        correct: false
      },
      {
        content: "until",
        correct: false
      },
      {
        content: "loop",
        correct: false
      }
    ]
  },
  {
    content: "Comment accÃ©dez-vous au premier Ã©lÃ©ment d'un tableau appelÃ© arr ?",
    explication: "Le premier Ã©lÃ©ment d'un tableau est accessible via l'indice 0, donc arr[0].",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "arr[1]",
        correct: false
      },
      {
        content: "arr.first",
        correct: false
      },
      {
        content: "arr.last",
        correct: false
      },
      {
        content: "arr[0]",
        correct: true
      }
    ]
  },
  {
    content: "Quelle structure de contrÃ´le exÃ©cute un bloc de code si une condition est fausse ?",
    explication: "unless exÃ©cute un bloc de code uniquement si la condition spÃ©cifiÃ©e est fausse.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "unless",
        correct: true
      },
      {
        content: "if",
        correct: false
      },
      {
        content: "case",
        correct: false
      },
      {
        content: "while",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la diffÃ©rence entre while et until ?",
    explication: "while exÃ©cute un bloc tant qu'une condition est vraie, tandis que until exÃ©cute un bloc tant qu'une condition est fausse.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "while vÃ©rifie si une condition est vraie, until vÃ©rifie si elle est fausse.",
        correct: true
      },
      {
        content: "while est utilisÃ© pour des boucles infinies, until ne l'est pas.",
        correct: false
      },
      {
        content: "until vÃ©rifie si une condition est vraie, while vÃ©rifie si elle est fausse.",
        correct: false
      },
      {
        content: "Il n'y a aucune diffÃ©rence.",
        correct: false
      }
    ]
  },
  {
    content: "Comment remplacez-vous un Ã©lÃ©ment dans un tableau en Ruby ?",
    explication: "Vous pouvez remplacer un Ã©lÃ©ment dans un tableau en assignant une nouvelle valeur Ã  un indice spÃ©cifique, comme array[index] = value.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "array.set(index, value)",
        correct: false
      },
      {
        content: "array[index] = value",
        correct: true
      },
      {
        content: "array.replace(index, value)",
        correct: false
      },
      {
        content: "array.change(index, value)",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode retourne et retire le premier Ã©lÃ©ment d'un tableau ?",
    explication: "La mÃ©thode shift retire et retourne le premier Ã©lÃ©ment d'un tableau.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "pop",
        correct: false
      },
      {
        content: "shift",
        correct: true
      },
      {
        content: "unshift",
        correct: false
      },
      {
        content: "delete",
        correct: false
      }
    ]
  },
  {
    content: "Comment ajouter un Ã©lÃ©ment au dÃ©but d'un tableau ?",
    explication: "unshift ajoute un Ã©lÃ©ment au dÃ©but d'un tableau.",
    subcategory: "Flow, Conditionals & Arrays",
    possibilities: [
      {
        content: "push",
        correct: false
      },
      {
        content: "shift",
        correct: false
      },
      {
        content: "unshift",
        correct: true
      },
      {
        content: "prepend",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode est utilisÃ©e pour itÃ©rer sur chaque Ã©lÃ©ment d'un tableau en Ruby ?",
    explication: "each est l'itÃ©rateur le plus courant en Ruby pour parcourir chaque Ã©lÃ©ment d'un tableau ou d'une collection.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "map",
        correct: false
      },
      {
        content: "each",
        correct: true
      },
      {
        content: "select",
        correct: false
      },
      {
        content: "yield",
        correct: false
      }
    ]
  },
  {
    content: "Que fait la mÃ©thode map lorsqu'elle est utilisÃ©e sur un tableau ?",
    explication: "map applique le bloc de code Ã  chaque Ã©lÃ©ment et retourne un nouveau tableau avec les rÃ©sultats.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "Elle retourne un tableau avec les mÃªmes Ã©lÃ©ments.",
        correct: false
      },
      {
        content: "Elle modifie chaque Ã©lÃ©ment du tableau en place.",
        correct: false
      },
      {
        content: "Elle retourne un nouveau tableau avec les rÃ©sultats du bloc de code appliquÃ© Ã  chaque Ã©lÃ©ment.",
        correct: true
      },
      {
        content: "Elle ne fait rien.",
        correct: false
      }
    ]
  },
  {
    content: "Comment passez-vous un bloc de code Ã  une mÃ©thode en Ruby ?",
    explication: "Les blocs de code en Ruby sont passÃ©s Ã  une mÃ©thode avec {} pour des blocs courts ou do...end pour des blocs plus longs.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "Utilisez yield.",
        correct: false
      },
      {
        content: "Passez-le entre parenthÃ¨ses.",
        correct: false
      },
      {
        content: "Utilisez les accolades {} ou do...end.",
        correct: true
      },
      {
        content: "Utilisez le mot-clÃ© block.",
        correct: false
      }
    ]
  },
  {
    content: "Que fait le mot-clÃ© yield dans une mÃ©thode ?",
    explication: "yield exÃ©cute le bloc de code passÃ© Ã  la mÃ©thode, permettant d'insÃ©rer du code externe dans le corps de la mÃ©thode.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "Il arrÃªte l'exÃ©cution de la mÃ©thode.",
        correct: false
      },
      {
        content: "Il exÃ©cute le bloc de code passÃ© Ã  la mÃ©thode.",
        correct: true
      },
      {
        content: "Il lÃ¨ve une exception.",
        correct: false
      },
      {
        content: "Il retourne une valeur par dÃ©faut.",
        correct: false
      }
    ]
  },
  {
    content: "Que renvoie la mÃ©thode select lorsqu'elle est utilisÃ©e sur un tableau ?",
    explication: "select retourne un nouveau tableau contenant uniquement les Ã©lÃ©ments pour lesquels le bloc de code a retournÃ© true.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "Les Ã©lÃ©ments pour lesquels le bloc retourne false.",
        correct: false
      },
      {
        content: "Les Ã©lÃ©ments pour lesquels le bloc retourne true.",
        correct: true
      },
      {
        content: "Un tableau inversÃ©.",
        correct: false
      },
      {
        content: "Le tableau original sans modifications.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la diffÃ©rence entre map et each ?",
    explication: "map transforme chaque Ã©lÃ©ment et retourne un nouveau tableau, tandis que each itÃ¨re simplement sans retourner un nouveau tableau.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "each modifie les Ã©lÃ©ments du tableau en place, map les laisse intacts.",
        correct: false
      },
      {
        content: "map retourne un nouveau tableau, each ne retourne rien.",
        correct: true
      },
      {
        content: "map ne fonctionne qu'avec des chaÃ®nes de caractÃ¨res.",
        correct: false
      },
      {
        content: "Il n'y a aucune diffÃ©rence.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode retourne un tableau avec les Ã©lÃ©ments qui ne satisfont pas la condition du bloc de code ?",
    explication: "reject fait l'inverse de select, il retourne les Ã©lÃ©ments pour lesquels la condition est fausse.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "reject",
        correct: true
      },
      {
        content: "select",
        correct: false
      },
      {
        content: "filter",
        correct: false
      },
      {
        content: "map",
        correct: false
      }
    ]
  },
  {
    content: "Comment spÃ©cifiez-vous les paramÃ¨tres d'un bloc en Ruby ?",
    explication: "Les paramÃ¨tres d'un bloc sont placÃ©s entre | | et reprÃ©sentent les Ã©lÃ©ments passÃ©s au bloc par l'itÃ©rateur.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "En utilisant yield.",
        correct: false
      },
      {
        content: "En les passant directement aprÃ¨s do.",
        correct: false
      },
      {
        content: "En les plaÃ§ant entre | | dans le bloc.",
        correct: true
      },
      {
        content: "En les dÃ©clarant dans la mÃ©thode.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la sortie du code suivant ? [1, 2, 3].map { |n| n * 2 }",
    explication: "Le code applique n * 2 Ã  chaque Ã©lÃ©ment du tableau et retourne [2, 4, 6].",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "[1, 2, 3]",
        correct: false
      },
      {
        content: "[2, 4, 6]",
        correct: true
      },
      {
        content: "[2, 3, 4]",
        correct: false
      },
      {
        content: "nil",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode permet de s'assurer qu'un bloc est prÃ©sent avant d'utiliser yield ?",
    explication: "block_given? vÃ©rifie si un bloc a Ã©tÃ© passÃ© Ã  la mÃ©thode avant d'utiliser yield.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "block_given?",
        correct: true
      },
      {
        content: "block_exists?",
        correct: false
      },
      {
        content: "block?",
        correct: false
      },
      {
        content: "has_block?",
        correct: false
      }
    ]
  },
  {
    content: "Quel est le rÃ©sultat du code suivant ? 3.times { |i| puts i }",
    explication: "times itÃ¨re 3 fois en passant Ã  chaque fois l'index actuel au bloc, ici 0, 1 et 2.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "012",
        correct: true
      },
      {
        content: "0 1 2",
        correct: false
      },
      {
        content: "1 2 3",
        correct: false
      },
      {
        content: "2 1 0",
        correct: false
      }
    ]
  },
  {
    content: "Que retourne la mÃ©thode find ?",
    explication: "find retourne le premier Ã©lÃ©ment correspondant ou nil s'il n'y a aucun Ã©lÃ©ment qui satisfait la condition.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "Un tableau avec tous les Ã©lÃ©ments correspondants.",
        correct: false
      },
      {
        content: "Le premier Ã©lÃ©ment qui satisfait la condition.",
        correct: true
      },
      {
        content: "nil si aucun Ã©lÃ©ment ne correspond.",
        correct: true
      },
      {
        content: "Les deux rÃ©ponses B et C.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la sortie de ce code ? result = [10, 20, 30].select { |n| n > 15 } puts result",
    explication: "select filtre les Ã©lÃ©ments du tableau, ne gardant que ceux qui sont supÃ©rieurs Ã  15, donc [20, 30].",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "[10]",
        correct: false
      },
      {
        content: "[10, 20]",
        correct: false
      },
      {
        content: "[20, 30]",
        correct: true
      },
      {
        content: "nil",
        correct: false
      }
    ]
  },
  {
    content: "Comment Ã©crivez-vous un bloc qui prend deux paramÃ¨tres ?",
    explication: "Un bloc en Ruby prenant deux paramÃ¨tres est Ã©crit comme { |param1, param2| ... } ou do |param1, param2| ... end.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "|param1 param2|",
        correct: false
      },
      {
        content: "param1, param2 ->",
        correct: false
      },
      {
        content: "{ |param1, param2| ... }",
        correct: true
      },
      {
        content: "do param1, param2",
        correct: false
      }
    ]
  },
  {
    content: "Que se passe-t-il si vous essayez d'utiliser yield sans passer de bloc ?",
    explication: "Appeler yield sans qu'un bloc ait Ã©tÃ© passÃ© lÃ¨ve une exception LocalJumpError.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "La mÃ©thode continue sans exÃ©cuter yield.",
        correct: false
      },
      {
        content: "Une erreur est levÃ©e.",
        correct: true
      },
      {
        content: "yield retourne nil.",
        correct: false
      },
      {
        content: "Le programme s'arrÃªte.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode est la plus adaptÃ©e pour transformer tous les Ã©lÃ©ments d'un tableau en appliquant une opÃ©ration sur chacun d'eux ?",
    explication: "map est conÃ§ue pour transformer chaque Ã©lÃ©ment d'un tableau en appliquant une opÃ©ration et en retournant un nouveau tableau.",
    subcategory: "Iterators & Blocks",
    possibilities: [
      {
        content: "each",
        correct: false
      },
      {
        content: "map",
        correct: true
      },
      {
        content: "select",
        correct: false
      },
      {
        content: "reject",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode est utilisÃ©e pour itÃ©rer sur chaque Ã©lÃ©ment d'un tableau en Ruby ?",
    explication: "each est l'itÃ©rateur le plus courant en Ruby pour parcourir chaque Ã©lÃ©ment d'un tableau ou d'une collection.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "map",
        correct: false
      },
      {
        content: "each",
        correct: true
      },
      {
        content: "select",
        correct: false
      },
      {
        content: "yield",
        correct: false
      }
    ]
  },
  {
    content: "Que fait la mÃ©thode map lorsqu'elle est utilisÃ©e sur un tableau ?",
    explication: "map applique le bloc de code Ã  chaque Ã©lÃ©ment et retourne un nouveau tableau avec les rÃ©sultats.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "Elle retourne un tableau avec les mÃªmes Ã©lÃ©ments.",
        correct: false
      },
      {
        content: "Elle modifie chaque Ã©lÃ©ment du tableau en place.",
        correct: false
      },
      {
        content: "Elle retourne un nouveau tableau avec les rÃ©sultats du bloc de code appliquÃ© Ã  chaque Ã©lÃ©ment.",
        correct: true
      },
      {
        content: "Elle ne fait rien.",
        correct: false
      }
    ]
  },
  {
    content: "Comment passez-vous un bloc de code Ã  une mÃ©thode en Ruby ?",
    explication: "Les blocs de code en Ruby sont passÃ©s Ã  une mÃ©thode avec {} pour des blocs courts ou do...end pour des blocs plus longs.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "Utilisez yield.",
        correct: false
      },
      {
        content: "Passez-le entre parenthÃ¨ses.",
        correct: false
      },
      {
        content: "Utilisez les accolades {} ou do...end.",
        correct: true
      },
      {
        content: "Utilisez le mot-clÃ© block.",
        correct: false
      }
    ]
  },
  {
    content: "Que fait le mot-clÃ© yield dans une mÃ©thode ?",
    explication: "yield exÃ©cute le bloc de code passÃ© Ã  la mÃ©thode, permettant d'insÃ©rer du code externe dans le corps de la mÃ©thode.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "Il arrÃªte l'exÃ©cution de la mÃ©thode.",
        correct: false
      },
      {
        content: "Il exÃ©cute le bloc de code passÃ© Ã  la mÃ©thode.",
        correct: true
      },
      {
        content: "Il lÃ¨ve une exception.",
        correct: false
      },
      {
        content: "Il retourne une valeur par dÃ©faut.",
        correct: false
      }
    ]
  },
  {
    content: "Que renvoie la mÃ©thode select lorsqu'elle est utilisÃ©e sur un tableau ?",
    explication: "select retourne un nouveau tableau contenant uniquement les Ã©lÃ©ments pour lesquels le bloc de code a retournÃ© true.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "Les Ã©lÃ©ments pour lesquels le bloc retourne false.",
        correct: false
      },
      {
        content: "Les Ã©lÃ©ments pour lesquels le bloc retourne true.",
        correct: true
      },
      {
        content: "Un tableau inversÃ©.",
        correct: false
      },
      {
        content: "Le tableau original sans modifications.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la diffÃ©rence entre map et each ?",
    explication: "map transforme chaque Ã©lÃ©ment et retourne un nouveau tableau, tandis que each itÃ¨re simplement sans retourner un nouveau tableau.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "each modifie les Ã©lÃ©ments du tableau en place, map les laisse intacts.",
        correct: false
      },
      {
        content: "map retourne un nouveau tableau, each ne retourne rien.",
        correct: true
      },
      {
        content: "map ne fonctionne qu'avec des chaÃ®nes de caractÃ¨res.",
        correct: false
      },
      {
        content: "Il n'y a aucune diffÃ©rence.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode retourne un tableau avec les Ã©lÃ©ments qui ne satisfont pas la condition du bloc de code ?",
    explication: "reject fait l'inverse de select, il retourne les Ã©lÃ©ments pour lesquels la condition est fausse.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "reject",
        correct: true
      },
      {
        content: "select",
        correct: false
      },
      {
        content: "filter",
        correct: false
      },
      {
        content: "map",
        correct: false
      }
    ]
  },
  {
    content: "Comment spÃ©cifiez-vous les paramÃ¨tres d'un bloc en Ruby ?",
    explication: "Les paramÃ¨tres d'un bloc sont placÃ©s entre | | et reprÃ©sentent les Ã©lÃ©ments passÃ©s au bloc par l'itÃ©rateur.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "En utilisant yield.",
        correct: false
      },
      {
        content: "En les passant directement aprÃ¨s do.",
        correct: false
      },
      {
        content: "En les plaÃ§ant entre | | dans le bloc.",
        correct: true
      },
      {
        content: "En les dÃ©clarant dans la mÃ©thode.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la sortie du code suivant ? [1, 2, 3].map { |n| n * 2 }",
    explication: "Le code applique n * 2 Ã  chaque Ã©lÃ©ment du tableau et retourne [2, 4, 6].",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "[1, 2, 3]",
        correct: false
      },
      {
        content: "[2, 4, 6]",
        correct: true
      },
      {
        content: "[2, 3, 4]",
        correct: false
      },
      {
        content: "nil",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode permet de s'assurer qu'un bloc est prÃ©sent avant d'utiliser yield ?",
    explication: "block_given? vÃ©rifie si un bloc a Ã©tÃ© passÃ© Ã  la mÃ©thode avant d'utiliser yield.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "block_given?",
        correct: true
      },
      {
        content: "block_exists?",
        correct: false
      },
      {
        content: "block?",
        correct: false
      },
      {
        content: "has_block?",
        correct: false
      }
    ]
  },
  {
    content: "Quel est le rÃ©sultat du code suivant ? 3.times { |i| puts i }",
    explication: "times itÃ¨re 3 fois en passant Ã  chaque fois l'index actuel au bloc, ici 0, 1 et 2.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "012",
        correct: true
      },
      {
        content: "0 1 2",
        correct: false
      },
      {
        content: "1 2 3",
        correct: false
      },
      {
        content: "2 1 0",
        correct: false
      }
    ]
  },
  {
    content: "Que retourne la mÃ©thode find ?",
    explication: "find retourne le premier Ã©lÃ©ment correspondant ou nil s'il n'y a aucun Ã©lÃ©ment qui satisfait la condition.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "Un tableau avec tous les Ã©lÃ©ments correspondants.",
        correct: false
      },
      {
        content: "Le premier Ã©lÃ©ment qui satisfait la condition.",
        correct: true
      },
      {
        content: "nil si aucun Ã©lÃ©ment ne correspond.",
        correct: true
      },
      {
        content: "Les deux rÃ©ponses B et C.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle est la sortie de ce code ? result = [10, 20, 30].select { |n| n > 15 } puts result",
    explication: "select filtre les Ã©lÃ©ments du tableau, ne gardant que ceux qui sont supÃ©rieurs Ã  15, donc [20, 30].",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "[10]",
        correct: false
      },
      {
        content: "[10, 20]",
        correct: false
      },
      {
        content: "[20, 30]",
        correct: true
      },
      {
        content: "nil",
        correct: false
      }
    ]
  },
  {
    content: "Comment Ã©crivez-vous un bloc qui prend deux paramÃ¨tres ?",
    explication: "Un bloc en Ruby prenant deux paramÃ¨tres est Ã©crit comme { |param1, param2| ... } ou do |param1, param2| ... end.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "|param1 param2|",
        correct: false
      },
      {
        content: "param1, param2 ->",
        correct: false
      },
      {
        content: "{ |param1, param2| ... }",
        correct: true
      },
      {
        content: "do param1, param2",
        correct: false
      }
    ]
  },
  {
    content: "Que se passe-t-il si vous essayez d'utiliser yield sans passer de bloc ?",
    explication: "Appeler yield sans qu'un bloc ait Ã©tÃ© passÃ© lÃ¨ve une exception LocalJumpError.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "La mÃ©thode continue sans exÃ©cuter yield.",
        correct: false
      },
      {
        content: "Une erreur est levÃ©e.",
        correct: true
      },
      {
        content: "yield retourne nil.",
        correct: false
      },
      {
        content: "Le programme s'arrÃªte.",
        correct: false
      }
    ]
  },
  {
    content: "Quelle mÃ©thode est la plus adaptÃ©e pour transformer tous les Ã©lÃ©ments d'un tableau en appliquant une opÃ©ration sur chacun d'eux ?",
    explication: "map est conÃ§ue pour transformer chaque Ã©lÃ©ment d'un tableau en appliquant une opÃ©ration et en retournant un nouveau tableau.",
    subcategory: "Hash & Symbols",
    possibilities: [
      {
        content: "each",
        correct: false
      },
      {
        content: "map",
        correct: true
      },
      {
        content: "select",
        correct: false
      },
      {
        content: "reject",
        correct: false
      }
    ]
  }
]

questions.each_with_index do |question, index|
  puts "[#{index+1}/#{questions.size}] Creating question: #{question[:content]}... ðŸŒ±"
  subcategory = Subcategory.find_by(name: question[:subcategory])
  question_i = Question.create!(
    content: question[:content],
    explication: question[:explication],
    subcategory: subcategory
  )

  question[:possibilities].each do |possibility|
    puts " - Creating possibilities: #{possibility[:content]}..."
    Possibility.create!(
      content: possibility[:content],
      correct: possibility[:correct],
      question: question_i
    )
  end
end

puts ""
puts "Finished! ðŸŒ±"
puts ""

puts ""
puts "-------- SEEDS CREATED : GG! ðŸ¥³ --------"
puts ""
puts ""
